{"version":3,"sources":["pages/admin section/Financial/Bills/BillRecords.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/admin section/Financial/Bills/Bills.js"],"names":["withTranslation","props","t","cell","isReadOnly","billId","data","dataGrid","createRef","useState","value","records","setRecords","loading","setLoading","getRecords","a","finBillsDataGrid","getMaterialsUnitsForAllBills","updatedBills","updatedAddsDiscountsRecords","setValue","length","bills","addsDiscounts","map","b","total","unitPrice","quantity","discountRatio","discount","additionRatio","addition","netPrice","calculateNetPrice","TotalTotal","reduce","acc","r","useEffect","basic","padded","ref","dataSource","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","allowColumnResizing","loadPanel","indicatorSrc","LoadingGifImage","onSaved","items","current","instance","getDataSource","onEditorPreparing","e","parentType","dataField","editorOptions","disabled","onRowPrepared","rowType","key","rowElement","style","backgroundColor","mode","useIcons","allowUpdating","allowDeleting","allowAdding","dataType","caption","setCellValue","newData","oldData","format","Configs","DECIMAL_NUM_FORMAT","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","DS","store","finCustomersSuppliersDataLookup","name","RequireFetchData","customers","useTranslation","Segment","title","columnChooser","enabled","remoteOperations","onInitNewRow","at","Date","onRowValidating","toast","error","isValid","visible","fullScreen","itemType","colCount","colSpan","isRequired","readOnly","sortIndex","sortOrder","displayExpr","valueExpr","allowClearing","allowFiltering","totalTotal","oldAddsDiscounts","additionsTotal","discountsTotal","finalTotal","addedTotal","editCellRender","BillRecords","render"],"mappings":"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","file":"static/js/11.bf37e33b.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, Scrolling, Sorting, RequiredRule } from 'devextreme-react/data-grid';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { finBillsDataGrid } from '../../../../Data Stores';\r\nimport LoadingGifImage from '../../../../res/images/loading.gif';\r\nimport { Configs } from '../../../../res';\r\n\r\n\r\n\r\n\r\nconst Records = (props) => {\r\n    const { t, cell, isReadOnly } = props;\r\n    const billId = cell?.data?.billId || cell.billId;\r\n    const dataGrid = createRef();\r\n    const [records, setRecords] = useState(isReadOnly ? null : (cell.value || []));\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getRecords = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { data: { data } } = await finBillsDataGrid.getRecords(billId);\r\n            const { updatedBills, updatedAddsDiscountsRecords } = getMaterialsUnitsForAllBills(data, []);\r\n            setRecords(updatedBills);\r\n            !isReadOnly && cell.setValue && cell.setValue(updatedBills.length ? { updatedBills, updatedAddsDiscountsRecords } : null);\r\n        } catch (err) {\r\n            return err;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const getMaterialsUnitsForAllBills = (bills, addsDiscounts) => {\r\n        const updatedBills = bills.map((b) => {\r\n            const total = b.unitPrice * b.quantity;\r\n            const discountRatio = b.discount ? (b.discount / total) : null;\r\n            const additionRatio = b.addition ? (b.addition / total) : null;\r\n            const netPrice = calculateNetPrice({ ...b, total, discountRatio, additionRatio });\r\n\r\n            return {\r\n                ...b,\r\n                total,\r\n                discountRatio,\r\n                additionRatio,\r\n                netPrice,\r\n            };\r\n        });\r\n\r\n        const TotalTotal = updatedBills.reduce((acc, r) => acc + r.total, 0);\r\n\r\n        const updatedAddsDiscountsRecords = addsDiscounts.map(r => {\r\n            const discountRatio = r.discount ? (r.discount / TotalTotal) : null;\r\n            const additionRatio = r.addition ? (r.addition / TotalTotal) : null;\r\n            return {\r\n                ...r,\r\n                discountRatio,\r\n                additionRatio,\r\n            };\r\n        });\r\n\r\n\r\n        return { updatedBills, updatedAddsDiscountsRecords };\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isReadOnly ? null : cell.value) return;\r\n        if (billId) {\r\n            getRecords();\r\n        }\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const onSaved = () => {\r\n        let gridInstance = dataGrid.current.instance;\r\n        let items = gridInstance.getDataSource().items();\r\n        cell.setValue && cell.setValue({ updatedBills: items, updatedAddsDiscountsRecords: [] });\r\n        return true;\r\n    };\r\n\r\n\r\n\r\n    const calculateNetPrice = (data) => {\r\n        return (data.quantity * data.unitPrice) - (data.discount || 0) + (data.addition || 0);\r\n    };\r\n\r\n    if (loading) return <Segment basic padded loading={loading} />;\r\n\r\n    return (\r\n        <DataGrid\r\n            ref={dataGrid}\r\n            dataSource={records}\r\n            showBorders\r\n            showColumnLines\r\n            columnHidingEnabled\r\n            wordWrapEnabled\r\n            columnAutoWidth\r\n            allowColumnResizing\r\n            loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n            onSaved={onSaved}\r\n            onEditorPreparing={(e) => {\r\n                if (e.parentType === \"dataRow\" && (e.dataField === \"total\" || e.dataField === \"netPrice\")) {\r\n                    e.editorOptions.disabled = true;\r\n                }\r\n            }}\r\n            onRowPrepared={(e) => {\r\n                if (e.rowType === \"data\" && e.key % 2 !== 0) {\r\n                    e.rowElement.style.backgroundColor = \"rgba(55,200,33,0.3)\";\r\n                }\r\n            }}\r\n\r\n        >\r\n            <Sorting mode='multiple' />\r\n            <Scrolling mode=\"infinity\" />\r\n            {!isReadOnly && <Editing\r\n                mode='batch'\r\n                useIcons\r\n                allowUpdating\r\n                allowDeleting\r\n                allowAdding\r\n            />}\r\n\r\n\r\n            <Column dataField=\"quantity\" dataType=\"number\" caption={t('Amount')}\r\n                setCellValue={(newData, value, oldData) => {\r\n                    newData.quantity = value > 0 ? value : 1;\r\n                    newData.unitPrice = 1;\r\n                    newData.total = newData.unitPrice * newData.quantity;\r\n                    if (oldData.additionRatio)\r\n                        newData.addition = oldData.additionRatio * newData.total;\r\n                    if (oldData.discountRatio)\r\n                        newData.discount = oldData.discountRatio * newData.total;\r\n                    newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n\r\n                }} >\r\n                <RequiredRule />\r\n            </Column>\r\n\r\n\r\n            <Column dataField=\"unitPrice\" caption={t('Price')} dataType='number' format={Configs.DECIMAL_NUM_FORMAT} setCellValue={(newData, value, oldData) => {\r\n                newData.unitPrice = value >= 0 ? value : 0;\r\n                newData.total = newData.unitPrice * oldData.quantity;\r\n                if (oldData.additionRatio)\r\n                    newData.addition = oldData.additionRatio * newData.total;\r\n                if (oldData.discountRatio)\r\n                    newData.discount = oldData.discountRatio * newData.total;\r\n                newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n\r\n            }} >\r\n                <RequiredRule />\r\n            </Column>\r\n\r\n            <Column dataField=\"total\" dataType='number' caption={t('Total')} format={Configs.DECIMAL_NUM_FORMAT} />\r\n\r\n            <Column dataField=\"discount\" format={Configs.DECIMAL_NUM_FORMAT} dataType='number' caption={t('Discount')}\r\n                setCellValue={(newData, value, oldData) => {\r\n                    newData.discount = value >= 0 ? value : 0;\r\n                    newData.discountRatio = newData.discount / oldData.total;\r\n                    newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n                }}\r\n            />\r\n\r\n            <Column dataField=\"discountRatio\" dataType='number'\r\n                caption={t('DiscountRatio')}\r\n                format='percent'\r\n                setCellValue={(newData, value, oldData) => {\r\n                    newData.discountRatio = value >= 0 ? value / 100 : 0;\r\n                    newData.discount = newData.discountRatio * oldData.total;\r\n                    newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n                }} />\r\n\r\n            <Column dataField=\"addition\" dataType='number' format={Configs.DECIMAL_NUM_FORMAT} caption={t('Addition')}\r\n                setCellValue={(newData, value, oldData) => {\r\n                    newData.addition = value >= 0 ? value : 0;\r\n                    newData.additionRatio = newData.addition / oldData.total;\r\n                    newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n                }}\r\n            />\r\n\r\n            <Column dataField=\"additionRatio\" dataType='number'\r\n                caption={t('AdditionRatio')}\r\n                format='percent'\r\n                setCellValue={(newData, value, oldData) => {\r\n                    newData.additionRatio = value > 0 ? value / 100 : 1;\r\n                    newData.addition = newData.additionRatio * oldData.total;\r\n                    newData.netPrice = calculateNetPrice({ ...oldData, ...newData });\r\n                }}\r\n            />\r\n\r\n            <Column dataField=\"netPrice\" dataType='number' format={Configs.DECIMAL_NUM_FORMAT} caption={t('NetPrice')} />\r\n\r\n            <Column dataField=\"notice\" caption={t('Notice')} />\r\n\r\n        </DataGrid>\r\n    );\r\n};\r\n\r\nexport default withTranslation()(Records);\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { createRef } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid, { Column, Editing, FilterPanel, FilterRow, Form, Popup, Scrolling, SearchPanel, Sorting, Lookup, RequiredRule, MasterDetail } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../../components';\r\nimport { finBillsDataGrid, finCustomersSuppliersDataLookup, } from '../../../../Data Stores';\r\nimport LoadingGifImage from '../../../../res/images/loading.gif';\r\nimport BillRecords from './BillRecords';\r\nimport { RequireFetchData } from '../../../../middlewares/HOC';\r\nimport { Configs } from '../../../../res';\r\n\r\n\r\nconst Bills = (props) => {\r\n    const { customers, } = props;\r\n    const { t } = useTranslation();\r\n    const dataGrid = createRef();\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Bills')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    ref={dataGrid}\r\n                    dataSource={finBillsDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    columnChooser={{ enabled: true, mode: 'select' }}\r\n                    remoteOperations\r\n                    onInitNewRow={(e) => {\r\n                        e.data.at = new Date();\r\n                    }}\r\n\r\n                    onRowValidating={e => {\r\n                        const data = { ...e.oldData, ...e.newData };\r\n                        if (!data.records || !data.records.length) {\r\n                            toast.error(t('BillCannotBeEmpty'));\r\n                            return e.isValid = false;\r\n                        }\r\n                    }}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onRowPrepared={(e) => {\r\n                        if (e.rowType === \"data\" && e.key % 2 !== 0) {\r\n                            e.rowElement.style.backgroundColor = \"rgba(55,200,33,0.3)\";\r\n                        }\r\n                    }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"virtual\" />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowAdding\r\n                        allowUpdating\r\n                        allowDeleting\r\n                    >\r\n                        <Popup fullScreen />\r\n                        <Form >\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item dataField=\"serialNumber\" />\r\n                                <Item dataField=\"at\" isRequired />\r\n                                <Item dataField=\"customerId\" isRequired />\r\n                                <Item dataField=\"notic\" colSpan={2} />\r\n                            </Item>\r\n                            <Item itemType=\"group\" colSpan={2}>\r\n                                <Item dataField=\"records\" isRequired />\r\n                            </Item>\r\n                            <Item itemType=\"group\" colCount={4} colSpan={2}>\r\n                                <Item dataField='discountsTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                                <Item dataField='additionsTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                                <Item dataField='totalTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                                <Item dataField='finalTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n                    <Column dataField=\"serialNumber\" caption={t('SerialNumber')} sortIndex={0} sortOrder='desc' />\r\n\r\n                    <Column dataField=\"at\" dataType=\"datetime\" caption={t('CreatedAt')} />\r\n\r\n                    <Column dataField=\"customerId\" caption={t('Customer')}>\r\n                        <Lookup\r\n                            dataSource={customers}\r\n                            displayExpr=\"fullName\"\r\n                            valueExpr='idCustomer'\r\n                            allowClearing\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n\r\n                    <Column dataField=\"notic\" caption={t('Notice')} />\r\n\r\n                    <Column\r\n                        dataField=\"records\"\r\n                        visible={false} caption={t('Records')}\r\n                        allowFiltering={false}\r\n                        setCellValue={(newData, value, oldData) => {\r\n                            newData.records = value.updatedBills;\r\n                            newData.totalTotal = newData.records.reduce((acc, r) => acc + r.total, 0);\r\n                            const oldAddsDiscounts = oldData.addsDiscounts || [];\r\n                            newData.addsDiscounts = [...oldAddsDiscounts, ...value.updatedAddsDiscountsRecords]?.map(r => {\r\n                                if (r.additionRatio)\r\n                                    r.addition = r.additionRatio * newData.totalTotal;\r\n                                if (r.discountRatio)\r\n                                    r.discount = r.discountRatio * newData.totalTotal;\r\n                                return { ...r };\r\n                            });\r\n\r\n                            newData.additionsTotal = newData.records.reduce((acc, r) => acc + (r.addition || 0), 0);\r\n                            newData.discountsTotal = newData.records.reduce((acc, r) => acc + (r.discount || 0), 0);\r\n                            newData.finalTotal = newData.records.reduce((acc, r) => acc + r.netPrice, 0) + (newData.addedTotal || 0);\r\n\r\n                        }}\r\n\r\n                        editCellRender={(cell) => <BillRecords cell={cell} />}\r\n                    />\r\n\r\n                    <Column dataField='totalTotal' visible={false} allowFiltering={false} dataType='number' caption={t('Total')} />\r\n                    <Column dataField='additionsTotal' visible={false} allowFiltering={false} dataType='number' caption={t('TotalAdditions')} />\r\n                    <Column dataField='discountsTotal' visible={false} allowFiltering={false} dataType='number' caption={t('TotalDiscounts')} />\r\n                    <Column dataField='finalTotal' allowFiltering={false} dataType='number' caption={t('FinalTotal')} />\r\n\r\n                    <MasterDetail enabled render={(cell) => <BillRecords cell={cell} isReadOnly />} />\r\n\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n\r\n        </Segment >\r\n    );\r\n};\r\n\r\nconst DS = [\r\n    {\r\n        store: finCustomersSuppliersDataLookup,\r\n        name: 'customers'\r\n    },\r\n];\r\n\r\nexport default RequireFetchData(Bills, DS);\r\n"],"sourceRoot":""}
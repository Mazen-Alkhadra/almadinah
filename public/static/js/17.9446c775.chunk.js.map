{"version":3,"sources":["pages/admin section/Financial/Bills/Bills.js"],"names":["DS","store","finCustomersSuppliersDataLookup","name","RequireFetchData","props","customers","t","useTranslation","gridRef","createRef","useState","showBillDetails","setShowBillDetails","row","setRow","onExportRow","e","a","current","instance","beginCustomLoading","billId","data","request","get","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","alert","endCustomLoading","basic","title","ref","dataSource","finBillsDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","remoteOperations","allowColumnResizing","allowColumnReordering","stateStoring","enabled","type","storageKey","onInitNewRow","at","Date","onRowValidating","oldData","newData","records","length","toast","error","isValid","loadPanel","indicatorSrc","LoadingGifImage","onRowPrepared","rowType","rowElement","style","backgroundColor","color","fontWeight","rowIndex","mode","visible","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","showNavigationButtons","useIcons","allowAdding","allowUpdating","allowDeleting","fullScreen","itemType","colCount","colSpan","dataField","isRequired","editorType","editorOptions","readOnly","format","inputAttr","caption","sortIndex","sortOrder","dataType","displayExpr","valueExpr","allowClearing","allowFiltering","setCellValue","value","updatedBills","totalTotal","Math","round","reduce","acc","r","total","oldAddsDiscounts","addsDiscounts","updatedAddsDiscountsRecords","map","additionRatio","addition","discountRatio","discount","additionsTotal","discountsTotal","finalTotal","netPrice","addedTotal","editCellRender","cell","hint","icon","onClick","onClose","open","content","isReadOnly","closeIcon","header","size","centered","closeOnDimmerClick","maxHeight","overflow"],"mappings":"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","file":"static/js/17.9446c775.chunk.js","sourcesContent":["import React, { createRef, useState } from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid, { Column, Button, Editing, FilterPanel, FilterRow, Form, Popup, Pager, Paging, SearchPanel, Sorting, Lookup, RequiredRule } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../../components';\r\nimport { finBillsDataGrid, finCustomersSuppliersDataLookup, } from '../../../../Data Stores';\r\nimport LoadingGifImage from '../../../../res/images/loading.gif';\r\nimport BillRecords from './BillRecords';\r\nimport { RequireFetchData } from '../../../../middlewares/HOC';\r\nimport request from '../../../../api';\r\n\r\n\r\nconst Bills = (props) => {\r\n    const { customers, } = props;\r\n    const { t } = useTranslation();\r\n    const gridRef = createRef();\r\n\r\n    const [showBillDetails, setShowBillDetails] = useState(false);\r\n    const [row, setRow] = useState([]);\r\n\r\n    const onShowBillDetails = (e) => {\r\n        setRow([e.row.data]);\r\n        setShowBillDetails(true);\r\n    };\r\n\r\n    const onHideBillDetails = () => {\r\n        setShowBillDetails(false);\r\n        setRow([]);\r\n    };\r\n\r\n    const onExportRow = async (e) => {\r\n        try {\r\n            gridRef.current.instance.beginCustomLoading();\r\n            const billId = e.row?.data?.billId;\r\n            if (billId) {\r\n                const { data } = await request.get(`user/bill/${billId}/export/excel`, { responseType: 'blob' });\r\n                const url = window.URL.createObjectURL(new Blob([data]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', 'bill.xlsx'); //or any other extension\r\n                document.body.appendChild(link);\r\n                link.click();\r\n            }\r\n        } catch (err) {\r\n            alert('Export Failed');\r\n        } finally {\r\n            gridRef.current.instance.endCustomLoading();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Bills')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    ref={gridRef}\r\n                    dataSource={finBillsDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    stateStoring={{ enabled: true, type: 'localStorage', storageKey: 'BillsDataGridConfigs' }}\r\n                    onInitNewRow={(e) => {\r\n                        e.data.at = new Date();\r\n                    }}\r\n\r\n                    onRowValidating={e => {\r\n                        const data = { ...e.oldData, ...e.newData };\r\n                        if (!data.records || !data.records.length) {\r\n                            toast.error(t('BillCannotBeEmpty'));\r\n                            return e.isValid = false;\r\n                        }\r\n                    }}\r\n\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onRowPrepared={(e) => {\r\n                        if (e.rowType === \"header\") {\r\n                            e.rowElement.style.backgroundColor = \"rgba(55,20,33,0.3)\";\r\n                            e.rowElement.style.color = 'brown';\r\n                            e.rowElement.style.fontWeight = 'bold';\r\n                        }\r\n                        if (e.rowType === \"data\" && e.rowIndex % 2 !== 0) {\r\n                            e.rowElement.style.backgroundColor = \"rgba(55,200,33,0.3)\";\r\n                        }\r\n                    }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Paging defaultPageSize={10} />\r\n                    <Pager\r\n                        showPageSizeSelector\r\n                        allowedPageSizes={[10, 20, 50, 100, 500, 1000]}\r\n                        showInfo\r\n                        showNavigationButtons\r\n                    />                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowAdding\r\n                        allowUpdating\r\n                        allowDeleting\r\n                    >\r\n                        <Popup fullScreen />\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                {/* <Item dataField=\"serialNumber\" /> */}\r\n                                <Item dataField=\"at\" isRequired editorType='dxDateBox' editorOptions={{ type: \"datetime\" }} />\r\n                                <Item dataField=\"customerId\" isRequired />\r\n                                <Item dataField=\"notic\" colSpan={2} />\r\n                            </Item>\r\n                            <Item itemType=\"group\" colSpan={2}>\r\n                                <Item dataField=\"records\" isRequired />\r\n                            </Item>\r\n                            <Item itemType=\"group\" colCount={4} colSpan={2}>\r\n                                {/* <Item dataField='discountsTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                                <Item dataField='additionsTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} />\r\n                                <Item dataField='totalTotal' editorOptions={{ readOnly: true, format: Configs.DECIMAL_NUM_FORMAT }} /> */}\r\n                                <Item dataField='finalTotal' editorOptions={{ readOnly: true, format: { type: 'fixedPoint' }, inputAttr: { style: \"background-color: rgba(150,150,20,0.3)\" } }} />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n                    <Column dataField=\"serialNumber\" caption={t('SerialNumber')} sortIndex={0} sortOrder='desc' />\r\n                    <Column dataField=\"notic\" caption={t('Notice')} />\r\n\r\n                    <Column dataField=\"at\" dataType=\"date\" caption={t('CreatedAt')} format={{ type: 'ShortDateShortTime' }} />\r\n\r\n                    <Column dataField=\"customerId\" caption={t('Customer')}>\r\n                        <Lookup\r\n                            dataSource={customers}\r\n                            displayExpr=\"fullName\"\r\n                            valueExpr='idCustomer'\r\n                            allowClearing\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n\r\n\r\n                    <Column\r\n                        dataField=\"records\"\r\n                        visible={false} caption={t('Records')}\r\n                        allowFiltering={false}\r\n                        setCellValue={(newData, value, oldData) => {\r\n                            newData.records = value.updatedBills;\r\n                            newData.totalTotal = Math.round(newData.records.reduce((acc, r) => acc + r.total, 0));\r\n                            const oldAddsDiscounts = oldData.addsDiscounts || [];\r\n                            newData.addsDiscounts = [...oldAddsDiscounts, ...value.updatedAddsDiscountsRecords]?.map(r => {\r\n                                if (r.additionRatio)\r\n                                    r.addition = r.additionRatio * newData.totalTotal;\r\n                                if (r.discountRatio)\r\n                                    r.discount = r.discountRatio * newData.totalTotal;\r\n                                return { ...r };\r\n                            });\r\n\r\n                            newData.additionsTotal = newData.records.reduce((acc, r) => acc + (r.addition || 0), 0);\r\n                            newData.discountsTotal = newData.records.reduce((acc, r) => acc + (r.discount || 0), 0);\r\n                            newData.finalTotal = Math.round(newData.records.reduce((acc, r) => acc + r.netPrice, 0) + (newData.addedTotal || 0));\r\n\r\n                        }}\r\n\r\n                        editCellRender={(cell) => <BillRecords cell={cell} />}\r\n                    />\r\n\r\n                    <Column dataField='totalTotal' visible={false} allowFiltering={false} dataType='number' caption={t('Total')} />\r\n                    <Column dataField='additionsTotal' visible={false} allowFiltering={false} dataType='number' caption={t('TotalAdditions')} />\r\n                    <Column dataField='discountsTotal' visible={false} allowFiltering={false} dataType='number' caption={t('TotalDiscounts')} />\r\n                    <Column dataField='finalTotal' allowFiltering={false} dataType='number' format={{ type: 'fixedPoint' }} caption={t('FinalTotal')} />\r\n\r\n\r\n                    <Column type='buttons' caption={t('Actions')}>\r\n                        <Button name='edit' />\r\n                        <Button name='delete' />\r\n                        <Button hint={t('Records')} icon=\"copy\" onClick={onShowBillDetails} visible={(e) => e.row.data.billId} />\r\n                        <Button hint={t('EXPORT')} icon=\"xlsxfile\" onClick={onExportRow} visible={(e) => e.row.data.billId} />\r\n                    </Column>\r\n                </DataGrid>\r\n\r\n                <Modal\r\n                    onClose={onHideBillDetails}\r\n                    open={showBillDetails}\r\n                    content={row[0] && <Segment basic><BillRecords cell={row[0]} isReadOnly /></Segment>}\r\n                    closeIcon\r\n                    header={t('Records')}\r\n                    size='fullscreen'\r\n                    centered\r\n                    closeOnDimmerClick={false}\r\n                    style={{ maxHeight: '95vh', overflow: 'auto' }}\r\n                />\r\n            </Segment>\r\n\r\n\r\n        </Segment >\r\n    );\r\n};\r\n\r\nconst DS = [\r\n    {\r\n        store: finCustomersSuppliersDataLookup,\r\n        name: 'customers'\r\n    },\r\n];\r\n\r\nexport default RequireFetchData(Bills, DS);\r\n"],"sourceRoot":""}
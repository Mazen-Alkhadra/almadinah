{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/Financial/Reports/CustomerBalance.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","DS","store","finCustomersSuppliersDataLookup","RequireFetchData","props","customers","useTranslation","useState","setData","loading","setLoading","error","setError","showBillDetails","setShowBillDetails","row","setRow","onShowBillDetails","onHideBillDetails","customerId","from","getTime","to","form","onGenerateClick","params","a","requset","get","calculateSelectedRow","options","summaryProcess","totalValue","billId","paymentId","title","basic","colCount","formData","editorType","label","text","editorOptions","items","searchEnabled","valueExpr","displayExpr","showClearButton","primary","fluid","content","onClick","dataSource","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","allowColumnResizing","hoverStateEnabled","allowColumnReordering","stateStoring","enabled","storageKey","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","onRowPrepared","rowElement","style","backgroundColor","color","fontWeight","onCellPrepared","el","cellElement","firstChild","mode","visible","dataType","caption","sortIndex","sortOrder","allowClearing","format","Configs","DECIMAL_NUM_FORMAT","hint","icon","calculateCustomSummary","summaryType","displayFormat","valueFormat","precision","showInColumn","onClose","open","cell","isReadOnly","closeIcon","header","size","centered","closeOnDimmerClick","maxHeight","overflow"],"mappings":"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","file":"static/js/14.20e2cd5d.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React, { useState } from 'react';\r\nimport { Divider, Segment, Button, Modal } from 'semantic-ui-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Form, { Item } from 'devextreme-react/ui/form';\r\nimport DataGrid, { Button as DevButton, Column, Lookup, Export, FilterPanel, FilterRow, Scrolling, SearchPanel, Sorting, RequiredRule, Summary, TotalItem } from 'devextreme-react/data-grid';\r\nimport { finCustomersSuppliersDataLookup } from '../../../../Data Stores';\r\nimport { ErrorSegment, PageHeader } from '../../../../components';\r\nimport requset from '../../../../api';\r\nimport LoadingGifImage from '../../../../res/images/loading.gif';\r\nimport { Configs } from '../../../../res';\r\nimport datagridExporter from '../../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../../middlewares/HOC';\r\nimport BillRecords from '../Bills/BillRecords';\r\n\r\nconst CustomerBalance = (props) => {\r\n    const { customers } = props;\r\n    const { t } = useTranslation();\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const [showBillDetails, setShowBillDetails] = useState(false);\r\n    const [row, setRow] = useState([]);\r\n\r\n    const onShowBillDetails = (e) => {\r\n        setRow([e.row.data]);\r\n        setShowBillDetails(true);\r\n    };\r\n\r\n    const onHideBillDetails = () => {\r\n        setShowBillDetails(false);\r\n        setRow([]);\r\n    };\r\n\r\n    const [form] = useState({\r\n        customerId: null,\r\n        from: new Date(new Date().getTime() - (1000 * 60 * 60 * 24 * 10)),\r\n        to: new Date(),\r\n    });\r\n\r\n    const onGenerateClick = async (params) => {\r\n        setLoading(true);\r\n        setError('');\r\n        setData(null);\r\n        try {\r\n            const { data: { data } } = await requset.get(`/user/reports/customer-balance`, { params });\r\n            setData(data);\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const calculateSelectedRow = (options) => {\r\n        if (options.name === 'Summary') {\r\n            if (options.summaryProcess === 'start') {\r\n                options.totalValue = 0;\r\n            } else if (options.summaryProcess === 'calculate') {\r\n                if (options.value.billId)\r\n                    options.totalValue -= options.value.value;\r\n                else if (options.value.paymentId)\r\n                    options.totalValue += options.value.value;\r\n            }\r\n        }\r\n    };\r\n    const renderFilters = () => {\r\n        return (\r\n            <Segment basic>\r\n                <Form colCount={3} formData={form}>\r\n                    <Item dataField=\"customerId\" editorType=\"dxSelectBox\" label={{ text: t('Customer') }} editorOptions={{ items: customers, searchEnabled: true, valueExpr: 'idCustomer', displayExpr: \"fullName\", }} />\r\n                    <Item dataField=\"from\" editorType=\"dxDateBox\" label={{ text: t('From') }} editorOptions={{ showClearButton: true }} />\r\n                    <Item dataField=\"to\" editorType=\"dxDateBox\" label={{ text: t('To') }} editorOptions={{ showClearButton: true }} />\r\n                </Form>\r\n\r\n                <Divider />\r\n                <Button primary fluid content={t('Generate')} onClick={() => onGenerateClick(form)} loading={loading} />\r\n                <Divider />\r\n            </Segment>\r\n        );\r\n    };\r\n\r\n\r\n    const renderResult = () => {\r\n        if (error) return <ErrorSegment />;\r\n\r\n        if (data) {\r\n            return (\r\n                <Segment basic>\r\n                    <DataGrid\r\n                        dataSource={data}\r\n                        showBorders\r\n                        showColumnLines\r\n                        columnHidingEnabled\r\n                        wordWrapEnabled\r\n                        columnAutoWidth\r\n                        allowColumnResizing\r\n                        hoverStateEnabled\r\n                        allowColumnReordering\r\n                        stateStoring={{ enabled: true, type: 'localStorage', storageKey: 'BalanceDataGridConfigs' }}\r\n                        onExporting={datagridExporter}\r\n                        loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                        onRowPrepared={(e) => {\r\n                            if (e.rowType === \"totalFooter\") {\r\n                                e.rowElement.style.backgroundColor = \"rgba(150,20,70,0.3)\";\r\n                            }\r\n                            if (e.rowType === \"header\") {\r\n                                e.rowElement.style.backgroundColor = \"rgba(55,20,33,0.3)\";\r\n                                e.rowElement.style.color = 'brown';\r\n                                e.rowElement.style.fontWeight = 'bold';\r\n                            }\r\n                            if (e.rowType === \"data\") {\r\n                                if (e.data.billId)\r\n                                    e.rowElement.style.backgroundColor = \"rgba(200,55,33,0.3)\";\r\n                                else if (e.data.paymentId)\r\n                                    e.rowElement.style.backgroundColor = \"rgba(55,200,33,0.3)\";\r\n                            }\r\n                        }}\r\n                        onCellPrepared={e => {\r\n                            if (e.rowType === 'totalFooter') {\r\n                                const el = e.cellElement?.firstChild;\r\n                                if (el) {\r\n                                    el.style.color = 'purple';\r\n                                }\r\n\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Sorting mode='multiple' />\r\n                        <Scrolling mode=\"infinity\" />\r\n                        <FilterRow visible />\r\n                        <FilterPanel visible />\r\n                        <SearchPanel visible />\r\n\r\n                        <Column dataField=\"at\" dataType=\"datetime\" caption={t('CreatedAt')} sortIndex={0} sortOrder='asc' />\r\n                        <Column dataField=\"customerId\" caption={t('Customer')}>\r\n                            <Lookup\r\n                                dataSource={customers}\r\n                                displayExpr=\"fullName\"\r\n                                valueExpr='idCustomer'\r\n                                allowClearing\r\n                            />\r\n                            <RequiredRule />\r\n                        </Column>\r\n                        <Column dataField=\"serialNumber\" caption={t('SerialNumber')} />\r\n                        <Column dataField=\"value\" caption={t('Value')} dataType='number' format={Configs.DECIMAL_NUM_FORMAT} />\r\n                        <Column dataField=\"notic\" caption={t('Notice')} />\r\n\r\n                        <Column type='buttons' caption={t('Actions')}>\r\n                            <DevButton hint={t('Records')} icon=\"copy\" onClick={onShowBillDetails} visible={(e) => e.row.data.billId} />\r\n                        </Column>\r\n\r\n                        <Summary calculateCustomSummary={calculateSelectedRow} >\r\n                            <TotalItem\r\n                                name=\"Summary\"\r\n                                summaryType=\"custom\"\r\n                                displayFormat={`${t('Balance')}: {0}`}\r\n                                valueFormat={{ precision: 2 }}\r\n                                showInColumn=\"value\" />\r\n                        </Summary>\r\n\r\n                        <Export enabled />\r\n\r\n                        <Modal\r\n                            onClose={onHideBillDetails}\r\n                            open={showBillDetails}\r\n                            content={row[0] && <Segment basic><BillRecords cell={row[0]} isReadOnly /></Segment>}\r\n                            closeIcon\r\n                            header={t('Records')}\r\n                            size='fullscreen'\r\n                            centered\r\n                            closeOnDimmerClick={false}\r\n                            style={{ maxHeight: '95vh', overflow: 'auto' }}\r\n                        />\r\n                    </DataGrid>\r\n                </Segment>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment>\r\n            <PageHeader title={t('CustomerBalance')} />\r\n            {renderFilters()}\r\n            {renderResult()}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n    {\r\n        store: finCustomersSuppliersDataLookup,\r\n        name: 'customers'\r\n    },\r\n];\r\n\r\nexport default RequireFetchData(CustomerBalance, DS);"],"sourceRoot":""}